Given the file_to_server and after encrypting Bytes
http://stackoverflow.com/questions/26344714/jpg-image-becomes-corrupted-or-damaged-when-sent-over-socket-in-java

ERROR: WE MUST USE INPUTSTREAM DIRECTLY INSTEAD OF INPUTSTREAMREADER(WILL CONVERT BYTES OF IMAGE INTO CHARS)
http://www.tutorialspoint.com/java/io/bufferedoutputstream_write_byte.htm

byte[] encryptedBytes= joining_encrypted_blocks.toByteArray();
.
.
.

Method 1:
Client use BufferedOutputStream instead of PrintWriter
******USE THIS FOR IMAGE************
 //TODO: use bufferedpOUTPUTSTREAM INSTEAD OF PRINTWRITER FOR IMAGE
                    BufferedOutputStream bufferedOutputStream= new BufferedOutputStream(outputStream_to_server);
                    bufferedOutputStream.write(encryptedBytes, 0, encryptedBytes.length);
                    bufferedOutputStream.flush();

****THIS ONE IS FOR TEXT FILE***
                    //SEND TO SECSTORE
                    out.write(encryptedBytes_string+"\n");
                    out.flush();
                    file_sent = true;
*********************************



FOR YOUR SERVER SIDE:
https://docs.oracle.com/javase/7/docs/api/java/io/BufferedInputStream.html#read(byte[],%20int,%20int)


        //TODO: convert buffinputstream into byte array
        BufferedInputStream bufferedInputStream= new BufferedInputStream(inputStream_from_client);
        int numberBytes= bufferedInputStream.available(); //tells u how many bytes there are
        //initialize fileReceived_bytes
        byte[] fileReceived_byte = new byte[numberBytes];
        //then simply read over from stream into byte array
        bufferedInputStream.read(fileReceived_byte, 0, numberBytes);

  	//TODO: write decrypted bytes into a image file using FileOuputStream
        FileOutputStream create_image_file= new FileOutputStream("pathname for image");
        create_image_file.write(decryptedBytes);
        create_image_file.close();
        
		

